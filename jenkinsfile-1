pipeline {
    agent any
         environment{
            imagename = 'train-bus'
         }
    stages{
      stage("git clone"){
         steps{
            git branch: 'dev', credentialsId: 'git_credential', url: 'https://github.com/20l35a0114/Train-Ticket-Reservation-System1.git'
         }
      }
      stage("build code"){
         steps{
            sh "mvn clean install"
         }
      }
      stage("test code"){
         steps{
            sh "mvn test"
         }
      }
      stage("deploy code"){
         steps{
            sshagent(['tomcat']) {
    // some block
             sh "scp -o StrictHostKeyChecking=no target/TrainBook-1.0.0-SNAPSHOT.war ubuntu@50.16.10.44:/opt/tomcat/webapps"
            }
         }
      }
      stage("Build Docker"){
         steps {
            script {
                 sh " docker build -t 20l35a0114/${imagename}:${BUILD_NUMBER} ." 
            }
               
         }
      }
      stage("push a image "){
         steps {
            script {
               withCredentials([string(credentialsId: 'dockerhub-pwd', variable: 'dockerhubpwd')])  {
               sh 'docker login -u 20l35a0114 -p ${dockerhubpwd}'
               }
               sh " docker push 20l35a0114/${imagename}:${BUILD_NUMBER} "
            }
         }
      }
      stage('stop pervious container'){
         steps{       
            sshagent(['docker-conn']) {
              sh "docker ps -f 20l35a0114/${imagename} -q | xargs --no-run-if-empty docker container stop"
              sh "docker container ls -a -f 20l35a0114/${imagename}  -q | xargs -r docker container rm"
            }        
         }
      }
      stage("run Docker"){
         steps {
            sshagent(['docker-conn']) {
               script {
               sh "hostname -I"   
               sh " docker run -itd --name udaymohan -p 8086:8080 20l35a0114/${imagename}:${BUILD_NUMBER}" 
               }     
            }
         }
      }
   }
}
  
